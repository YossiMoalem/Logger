#!/usr/bin/perl
#
#This is a fimple filter that thakes a log (with all messages),
#and removes all log messages that would not have been printed, 
#if this logger was used, with a given flush severity and 
#a given number of messages to flush.
#This can be used to test teh logger:
#Compile the logger with debug level that print all messages
#then filter the output, and compare it to the log file generated by the logger
#example:
#  Using the test app (test.cpp)
#       if logger writes its output to std::out (the debug messages are sent to std:err)
#  ./test 5 1000 2  > log.txt 2> allMessages.txt
#       (run 5 threads, 1000 messages and 2 precent of messages should initiate flush
#       the log output will be written to log.txt, and the debug - to allMessages.txt
#  sort allMessages.txt > sortedMessages.txt
#       (sort the messages according to the token ID, to take care of issues of messages printed to 
#       the debug log in deferent order of the log (caching etc.)
#  filter.pl sortedMessages.txt 98 20 > filteredMessages.txt
#       (Flush severity set to 98 (100 - the 2 precent from above), every flush writes 20 messages back
#  cut -d"|" -f2 filteredMessages.txt > filteredNoToken.txt
#       (remove the token)
#  diff -w filteredNoToken.txt log.txt
#       (files should be identical.)

use strict;
use warnings;

my ($inputFileName, $flushSeverity, $numOfMessagesToFlush, $test) = @ARGV;
die "Usage: $ARGV[0] <input file name> <flush severity> <number of messages to flush>" unless (defined $flushSeverity and !defined $test);

#for long files, concider using `tac`
open (LOG, $inputFileName) or die "Cannot open file $inputFileName";

my $gLinedToPrint = 0;
my @lines = reverse<LOG>;

my @filteredLog;
foreach my $line (@lines) 
{
#get the message severity
   $line =~ /Severity: (\d+)/; 
   my $severity = $1;
   if (!defined $severity)
   {
      push (@filteredLog, "$line");
      next;
   }

   if ($severity >= $flushSeverity)
   {
      $gLinedToPrint = $numOfMessagesToFlush;
      push (@filteredLog, "*************************************************\n");
   }

   if ( $gLinedToPrint > 0 )
   {
      push (@filteredLog, "$line" );
      --$gLinedToPrint ;
   }
}
push (@filteredLog, "*************************************************\n");
print reverse(@filteredLog);

close LOG;
